@model DTOStatistics
@inject SignInManager<Users> SignInManager
@inject UserManager<Users> UserManager

@{
    ViewData["Title"] = "Statistics";
    ViewData["ActivePage"] = ManageNavPages.Statistics;
}

@{
    Layout = "~/Views/Account/Manage/_Layout.cshtml";
}

<link rel="stylesheet" href="~/css/Statistics.css" />

@if (!SignInManager.IsSignedIn(User))
{
    <div class="alert alert-warning" role="alert">
        You must be logged in to view statistics.
        <div>
            @Html.ActionLink("Login", "Login", "Account") or @Html.ActionLink("Register", "Register", "Account")
        </div>
    </div>
}

@foreach (var lang in Model.LangList)
{
    <div class="languages text-dark" id="@lang.Id">
        @lang.WordNativeLang - @lang.Total

        @{
            List<string> categories = new List<string>();

            @foreach (var item in Model.testResults.Where(item => item.LangName == lang.WordNativeLang))
            {
                categories.Add(item.CategoryName);
            }

            HashSet<string> uniqueCat = new HashSet<string>(categories);
        }

        @foreach (var item in uniqueCat)
        {
            <div class="categories" id="@lang.Id" cat="@item">
                @item

                @{
                    List<string> subCategories = new List<string>();

                    @foreach (var subCat in Model.testResults.Where(subCat => subCat.LangName == lang.WordNativeLang && subCat.CategoryName == item))
                    {
                        subCategories.Add(subCat.SubCategoryName);
                    }

                    HashSet<string> uniqueSubCat = new HashSet<string>(subCategories);
                }

                @foreach (var subCat in uniqueSubCat)
                {
                    <div class="subCategories" id="@lang.Id" cat="@item" subCat="@subCat">
                        @subCat

                        @{
                            List<string> tests = new List<string>();

                            @foreach (var test in Model.testResults.Where(test => test.LangName == lang.WordNativeLang && test.CategoryName == item))
                            {
                                tests.Add(test.TestName.Replace("\\", "/"));
                            }

                            HashSet<string> uniqueTests = new HashSet<string>(tests);
                        }

                        @foreach (var test in uniqueTests)
                        {
                            <div class="tests" id="@lang.Id" cat="@item" subCat="@subCat" test="@test">
                                @test
                                <div class="testResults" id="@lang.Id" cat="@item" subCat="@subCat" test="@test">
                                    <table class="table text-dark">
                                        <thead>
                                            <tr>
                                                <th>
                                                    Test Date
                                                </th>
                                                <th>
                                                    Result
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>

                                            @foreach (var testScore in Model.testResults.Where(testScore => testScore.LangName == lang.WordNativeLang &&
                                                                                             testScore.CategoryName == item && testScore.SubCategoryName == subCat &&
                                                                                             testScore.TestName.Replace("\\", "/") == test))
                                            {
                                                <tr>
                                                    <td>
                                                        @Html.DisplayFor(modelItem => testScore.TestDate)
                                                    </td>
                                                    <td>
                                                        @Html.DisplayFor(modelItem => testScore.Result)
                                                    </td>
                                                </tr>
                                            }

                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        }

                    </div>
                }

            </div>
        }

    </div>
}

<script src="~/js/Statistics.js"></script>
